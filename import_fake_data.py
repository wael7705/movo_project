#!/usr/bin/env python3
"""
ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุงูููููุฉ ููุธุงู Movo
"""

import psycopg2
import os
import sys

# ุฅุนุฏุงุฏุงุช ุงูุงุชุตุงู
DB_CONFIG = {
    'dbname': 'movo_system',
    'user': 'postgres',
    'password': 'movo2025',
    'host': 'localhost',
    'port': 5432
}

def check_database_connection():
    """ุงูุชุญูู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        # ุงูุชุญูู ูู ูุฌูุฏ ุงูุฌุฏุงูู
        cur.execute("""
            SELECT table_name 
            FROM information_schema.tables 
            WHERE table_schema = 'public' 
            AND table_name IN ('customers', 'restaurants', 'captains', 'orders')
        """)
        
        tables = [row[0] for row in cur.fetchall()]
        print(f"โ ุงูุฌุฏุงูู ุงูููุฌูุฏุฉ: {', '.join(tables)}")
        
        cur.close()
        conn.close()
        return True
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช: {e}")
        return False

def import_sql_file():
    """ุงุณุชูุฑุงุฏ ููู SQL"""
    sql_file = 'fake_data.sql'
    
    if not os.path.exists(sql_file):
        print(f"โ ููู {sql_file} ุบูุฑ ููุฌูุฏ")
        return False
    
    try:
        # ูุฑุงุกุฉ ููู SQL
        with open(sql_file, 'r', encoding='utf-8') as f:
            sql_content = f.read()
        
        # ุชูุณูู ุฅูู ุฃูุงูุฑ ูููุตูุฉ
        statements = [stmt.strip() for stmt in sql_content.split(';') if stmt.strip()]
        
        print(f"โ ุชู ุงูุนุซูุฑ ุนูู {len(statements)} ุฃูุฑ SQL")
        
        # ุงูุงุชุตุงู ููุจูู ุงูุจูุงูุงุช
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        success_count = 0
        error_count = 0
        
        for i, statement in enumerate(statements, 1):
            try:
                if statement.strip():
                    cur.execute(statement)
                    success_count += 1
                    if i % 10 == 0:  # ุนุฑุถ ุงูุชูุฏู ูู 10 ุฃูุงูุฑ
                        print(f"  โ ุชู ุชูููุฐ {i}/{len(statements)} ุฃูุฑ")
            except Exception as e:
                error_count += 1
                print(f"  โ ุฎุทุฃ ูู ุงูุฃูุฑ {i}: {e}")
                print(f"     ุงูุฃูุฑ: {statement[:100]}...")
        
        conn.commit()
        cur.close()
        conn.close()
        
        print(f"\nโ ุชู ุชูููุฐ {success_count} ุฃูุฑ ุจูุฌุงุญ")
        if error_count > 0:
            print(f"โ ูุดู ูู ุชูููุฐ {error_count} ุฃูุฑ")
        
        return error_count == 0
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ุฃุซูุงุก ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช: {e}")
        return False

def verify_data():
    """ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุณุชูุฑุฏุฉ"""
    try:
        conn = psycopg2.connect(**DB_CONFIG)
        cur = conn.cursor()
        
        # ุงูุชุญูู ูู ุนุฏุฏ ุงูุนููุงุก
        cur.execute("SELECT COUNT(*) FROM customers")
        customer_count = cur.fetchone()[0]
        print(f"โ ุนุฏุฏ ุงูุนููุงุก: {customer_count}")
        
        # ุงูุชุญูู ูู ุนุฏุฏ ุงููุทุงุนู
        cur.execute("SELECT COUNT(*) FROM restaurants")
        restaurant_count = cur.fetchone()[0]
        print(f"โ ุนุฏุฏ ุงููุทุงุนู: {restaurant_count}")
        
        # ุงูุชุญูู ูู ุนุฏุฏ ุงููุจุงุชู
        cur.execute("SELECT COUNT(*) FROM captains")
        captain_count = cur.fetchone()[0]
        print(f"โ ุนุฏุฏ ุงููุจุงุชู: {captain_count}")
        
        # ุงูุชุญูู ูู ุนุฏุฏ ุงูุทูุจุงุช
        cur.execute("SELECT COUNT(*) FROM orders")
        order_count = cur.fetchone()[0]
        print(f"โ ุนุฏุฏ ุงูุทูุจุงุช: {order_count}")
        
        # ุงูุชุญูู ูู ุชูุฒูุน ุญุงูุงุช ุงูุทูุจุงุช
        cur.execute("SELECT status, COUNT(*) FROM orders GROUP BY status ORDER BY status")
        status_counts = cur.fetchall()
        print("\n๐ ุชูุฒูุน ุญุงูุงุช ุงูุทูุจุงุช:")
        for status, count in status_counts:
            print(f"  {status}: {count} ุทูุจ")
        
        cur.close()
        conn.close()
        
        return customer_count > 0 and restaurant_count > 0
        
    except Exception as e:
        print(f"โ ุฎุทุฃ ุฃุซูุงุก ุงูุชุญูู ูู ุงูุจูุงูุงุช: {e}")
        return False

def main():
    """ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ"""
    print("๐ ุจุฏุก ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุงูููููุฉ...")
    print("=" * 50)
    
    # ุงูุชุญูู ูู ุงูุงุชุตุงู
    if not check_database_connection():
        print("โ ูุดู ูู ุงูุงุชุตุงู ุจูุงุนุฏุฉ ุงูุจูุงูุงุช")
        sys.exit(1)
    
    # ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช
    print("\n๐ฅ ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช...")
    if not import_sql_file():
        print("โ ูุดู ูู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช")
        sys.exit(1)
    
    # ุงูุชุญูู ูู ุงูุจูุงูุงุช
    print("\n๐ ุงูุชุญูู ูู ุงูุจูุงูุงุช ุงููุณุชูุฑุฏุฉ...")
    if not verify_data():
        print("โ ุงูุจูุงูุงุช ุบูุฑ ููุชููุฉ")
        sys.exit(1)
    
    print("\nโ ุชู ุงุณุชูุฑุงุฏ ุงูุจูุงูุงุช ุจูุฌุงุญ!")
    print("\n๐ฏ ููููู ุงูุขู:")
    print("  1. ุชุดุบูู Backend: python -m uvicorn app:app --reload")
    print("  2. ุชุดุบูู Frontend: pnpm dev")
    print("  3. ุฅูุดุงุก ุทูุจุงุช ููููุฉ ูู ุงููุงุฌูุฉ")

if __name__ == "__main__":
    main()
